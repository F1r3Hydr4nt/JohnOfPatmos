# GDB Commands for Monitoring Cast-128 S-boxes
# Generated by find_sboxes.py

python
import gdb

# Store original S-box values
sbox_original = {}
sbox_addresses = {
    'S1': 0x00018c60,
    'S2': 0x00019060,
    'S3': 0x00019460,
    'S4': 0x00019860,
    'S5': 0x00019c60,
    'S6': 0x0001a060,
    'S7': 0x0001a460,
    'S8': 0x0001a860,
}

def save_sbox_values():
    """Save current S-box values as reference."""
    global sbox_original
    for name, addr in sbox_addresses.items():
        try:
            # Read first 32 bytes of each S-box
            values = []
            for i in range(8):
                val = gdb.parse_and_eval(f'*(int*)(0x{addr:x} + {i*4})')
                values.append(int(val))
            sbox_original[name] = values
            print(f'Saved {name} values')
        except Exception as e:
            print(f'Error saving {name}: {e}')

def check_sbox_integrity():
    """Check if S-boxes have been modified."""
    corrupted = False
    for name, addr in sbox_addresses.items():
        if name not in sbox_original:
            continue
        try:
            for i in range(8):
                current = int(gdb.parse_and_eval(f'*(int*)(0x{addr:x} + {i*4})'))
                if current != sbox_original[name][i]:
                    print(f'\n*** S-BOX CORRUPTION DETECTED in {name}!')
                    print(f'    Word {i}: 0x{sbox_original[name][i]:08x} -> 0x{current:08x}')
                    corrupted = True
        except Exception as e:
            print(f'Error checking {name}: {e}')
    return corrupted

# Save initial values
save_sbox_values()
end

# Set read watchpoints on S-box access
# Monitor S1 access
rwatch *(int*)0x00018c60
commands
  silent
  python check_sbox_integrity()
  continue
end

# Monitor S2 access
rwatch *(int*)0x00019060
commands
  silent
  python check_sbox_integrity()
  continue
end

# Monitor S3 access
rwatch *(int*)0x00019460
commands
  silent
  python check_sbox_integrity()
  continue
end

# Monitor S4 access
rwatch *(int*)0x00019860
commands
  silent
  python check_sbox_integrity()
  continue
end

# Convenience commands
define check-sboxes
  python check_sbox_integrity()
end

define show-sbox
  if $argc == 0
    printf "Usage: show-sbox <1-8>\n"
  else
    if $arg0 == 1
      printf "S1 at 0x00018c60:\n"
      x/64wx 0x00018c60
    end
    if $arg0 == 2
      printf "S2 at 0x00019060:\n"
      x/64wx 0x00019060
    end
    if $arg0 == 3
      printf "S3 at 0x00019460:\n"
      x/64wx 0x00019460
    end
    if $arg0 == 4
      printf "S4 at 0x00019860:\n"
      x/64wx 0x00019860
    end
    if $arg0 == 5
      printf "S5 at 0x00019c60:\n"
      x/64wx 0x00019c60
    end
    if $arg0 == 6
      printf "S6 at 0x0001a060:\n"
      x/64wx 0x0001a060
    end
    if $arg0 == 7
      printf "S7 at 0x0001a460:\n"
      x/64wx 0x0001a460
    end
    if $arg0 == 8
      printf "S8 at 0x0001a860:\n"
      x/64wx 0x0001a860
    end
  end
end

define monitor-sbox-writes
  printf "Setting write watchpoints on S-boxes...\n"
  watch *(int*)0x00018c60
  watch *(int*)0x00019060
end

printf "\n"
printf "Cast-128 S-box Monitor Loaded\n"
printf "Commands:\n"
printf "  check-sboxes       - Check S-box integrity\n"
printf "  show-sbox <1-8>    - Display S-box contents\n"
printf "  monitor-sbox-writes - Set write watchpoints\n"
printf "\n"
